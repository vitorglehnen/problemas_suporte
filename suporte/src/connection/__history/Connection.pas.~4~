unit Connection;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.UI.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Phys, FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef, FireDAC.VCLUI.Wait, Data.DB, FireDAC.Comp.Client,
  FireDAC.Comp.DataSet, FireDAC.Phys.FB, FireDAC.Phys.FBDef,
  FireDAC.Phys.IBBase,
  System.IniFiles;

type
  TdmConnection = class(TDataModule)
    dsModulos: TDataSource;
    qModulos: TFDQuery;
    conDBSuporte: TFDConnection;
    qComboModulos: TFDQuery;
    qProblemas: TFDQuery;
    dsProblemas: TDataSource;
    FDPhysFBDriverLink1: TFDPhysFBDriverLink;
    qProblemasPR_MODULO: TStringField;
    qProblemasPR_TITULO: TStringField;
    qProblemasPR_PROBLEMA: TStringField;
    qProblemasPR_SOLUCAO: TStringField;
    qProblemasPR_CHAMADO: TIntegerField;
    qProblemasPR_DATA: TDateField;
    qProblemasPR_PRIMG: TBlobField;
    qProblemasPR_SOLUCAOIMG: TBlobField;
    qContaRegistros: TFDQuery;
    qContaRegistrosPR_TITULO: TStringField;
    qContaRegistrosPR_MODULO: TStringField;
    qContaRegistrosPR_PROBLEMA: TStringField;
    qContaRegistrosPR_SOLUCAO: TStringField;
    qContaRegistrosPR_CHAMADO: TIntegerField;
    qContaRegistrosPR_DATA: TDateField;
    qContaRegistrosPR_PRIMG: TBlobField;
    qContaRegistrosPR_SOLUCAOIMG: TBlobField;
    procedure qProblemasAfterInsert(DataSet: TDataSet);
    procedure qProblemasBeforeCancel(DataSet: TDataSet);
    procedure qProblemasBeforeEdit(DataSet: TDataSet);
    procedure qProblemasBeforePost(DataSet: TDataSet);
    procedure qModulosAfterScroll(DataSet: TDataSet);
    procedure qProblemasAfterScroll(DataSet: TDataSet);
    procedure qProblemasAfterPost(DataSet: TDataSet);
    procedure qProblemasAfterDelete(DataSet: TDataSet);
    procedure qModulosBeforeInsert(DataSet: TDataSet);
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
    procedure InverteBotoesCrudProblemas;
  public
    { Public declarations }
    class function New(TdmConnection: TdmConnection) : TdmConnection;
    constructor Create(TdmConnection: TdmConnection);
    destructor Destroy; override;
  end;

const
  ARQ_INI = 'Connect.ini';

implementation

uses
  Suporte.View.Pages.Form.Main;

{%CLASSGROUP 'Vcl.Controls.TControl'}
{$R *.dfm}
{ TdmConnection }

constructor TdmConnection.Create(TdmConnection: TdmConnection);
begin

end;

procedure TdmConnection.DataModuleCreate(Sender: TObject);
var
  ArqINI: TIniFile;
begin
  if not FileExists
    ('C:\Users\vitor.lehnen\Desktop\problemas_suporte\suporte\Win32\Debug\Connect.ini')
  then
  begin
    ArqINI := TIniFile.Create(ExtractFilePath(ParamStr(0)) + ARQ_INI);
    try
      ArqINI.WriteString('Conexão', 'CaminhoDoBanco', 'C:\Problemas Suporte')
    finally
      ArqINI.Free;
    end;
  end;

end;

destructor TdmConnection.Destroy;
begin

  inherited;
end;

procedure TdmConnection.InverteBotoesCrudProblemas;
begin
  formPrincipal.btnNovoProblema.Enabled :=
    not formPrincipal.btnNovoProblema.Enabled;
  formPrincipal.btnExcluirProblema.Enabled :=
    not formPrincipal.btnExcluirProblema.Enabled;
  formPrincipal.btnSalvarProblema.Enabled :=
    not formPrincipal.btnSalvarProblema.Enabled;
  formPrincipal.btnCancelarProblema.Enabled :=
    not formPrincipal.btnCancelarProblema.Enabled;
end;

class function New: TdmConnection;
begin
  Result := TdmConnection.Create();
end;

procedure TdmConnection.qModulosAfterScroll(DataSet: TDataSet);
begin
  formPrincipal.AtualizaGridProblemas;
  formPrincipal.cardPanelProblemas.ActiveCard :=
    formPrincipal.pnlCadastroProblema;
end;

procedure TdmConnection.qModulosBeforeInsert(DataSet: TDataSet);
begin
  formPrincipal.gridModulos.SetFocus;
end;

procedure TdmConnection.qProblemasAfterDelete(DataSet: TDataSet);
begin
  formPrincipal.ContaRegistrosProblemas;
end;

procedure TdmConnection.qProblemasAfterInsert(DataSet: TDataSet);
begin
  InverteBotoesCrudProblemas;
  formPrincipal.edtHoraProblema.Text := DateToStr(date);
end;

procedure TdmConnection.qProblemasAfterPost(DataSet: TDataSet);
begin
  formPrincipal.ContaRegistrosProblemas;
end;

procedure TdmConnection.qProblemasAfterScroll(DataSet: TDataSet);
begin
  formPrincipal.cardPanelProblemas.ActiveCard :=
    formPrincipal.pnlCadastroProblema;
end;

procedure TdmConnection.qProblemasBeforeCancel(DataSet: TDataSet);
begin
  InverteBotoesCrudProblemas;
end;

procedure TdmConnection.qProblemasBeforeEdit(DataSet: TDataSet);
begin
  InverteBotoesCrudProblemas;
end;

procedure TdmConnection.qProblemasBeforePost(DataSet: TDataSet);
begin
  InverteBotoesCrudProblemas;
end;

destructor TdmConnection.TdmConnection;
begin

  inherited;
end;

constructor TdmConnection.TdmConnection;
begin

end;

end.
